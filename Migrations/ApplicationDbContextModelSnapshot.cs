// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using API.Shared.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Features.Analytics.Models.AbTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("FeatureKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature_key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Dictionary<string, JsonDocument>>("VariantConfigurations")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, double>>("VariantDistribution")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ab_tests");
                });

            modelBuilder.Entity("API.Features.Analytics.Models.AbTestMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AbTestId")
                        .HasColumnType("uuid")
                        .HasColumnName("ab_test_id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metric_name");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("SampleSize")
                        .HasColumnType("integer")
                        .HasColumnName("sample_size");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<string>("Variant")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("variant");

                    b.HasKey("Id");

                    b.HasIndex("AbTestId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ab_test_metric");
                });

            modelBuilder.Entity("API.Features.Analytics.Models.PageView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Dictionary<string, string>>("CustomData")
                        .HasColumnType("hstore")
                        .HasColumnName("custom_data");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("text")
                        .HasColumnName("referrer_url");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("page_views");
                });

            modelBuilder.Entity("API.Features.Collections.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("collections");
                });

            modelBuilder.Entity("API.Features.Collections.Models.MovieCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_on");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("CollectionId", "MovieId")
                        .IsUnique();

                    b.ToTable("movie_collections");
                });

            modelBuilder.Entity("API.Features.Downloads.Models.Download", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<Guid?>("EpisodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("episode_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("language");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("media_type");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("quality");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TvShowId")
                        .HasColumnType("uuid")
                        .HasColumnName("tv_show_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("Language");

                    b.HasIndex("MediaType");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Quality");

                    b.HasIndex("EpisodeId", "Language", "Quality")
                        .HasFilter("episode_id IS NOT NULL");

                    b.HasIndex("MovieId", "Language", "Quality")
                        .HasFilter("movie_id IS NOT NULL");

                    b.HasIndex("SeasonId", "Language", "Quality")
                        .HasFilter("season_id IS NOT NULL");

                    b.HasIndex("TvShowId", "Language", "Quality")
                        .HasFilter("tv_show_id IS NOT NULL");

                    b.ToTable("downloads", t =>
                        {
                            t.HasCheckConstraint("CK_Download_SingleMediaType", "((CASE WHEN movie_id IS NOT NULL THEN 1 ELSE 0 END) + (CASE WHEN tv_show_id IS NOT NULL THEN 1 ELSE 0 END) + (CASE WHEN season_id IS NOT NULL THEN 1 ELSE 0 END) + (CASE WHEN episode_id IS NOT NULL THEN 1 ELSE 0 END)) = 1");
                        });
                });

            modelBuilder.Entity("API.Features.FeatureFlags.Models.FeatureFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("ClientKey")
                        .HasColumnType("text")
                        .HasColumnName("client_key");

                    b.Property<Dictionary<string, object>>("Configuration")
                        .HasColumnType("jsonb");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("feature_flags");
                });

            modelBuilder.Entity("API.Features.Genres.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("genres");
                });

            modelBuilder.Entity("API.Features.Genres.Models.MediaGenre", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id");

                    b.HasKey("MediaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("media_genres");
                });

            modelBuilder.Entity("API.Features.Jobs.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CronExpression")
                        .HasColumnType("text")
                        .HasColumnName("cron_expression");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_run");

                    b.Property<Dictionary<string, string>>("Parameters")
                        .HasColumnType("hstore")
                        .HasColumnName("parameters");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("API.Features.Languages.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("FlagIcon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("flag_icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("iso_code");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("API.Features.Languages.Models.MediaTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("language_code");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_id");

                    b.Property<JsonDocument>("MetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("meta_data");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Overview")
                        .HasColumnType("text")
                        .HasColumnName("overview");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TvShowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvShowId");

                    b.ToTable("media_translation");
                });

            modelBuilder.Entity("API.Features.Movies.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<decimal?>("Popularity")
                        .HasColumnType("numeric");

                    b.Property<string>("PosterPath")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("VoteAverage")
                        .HasColumnType("numeric");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Slug")
                        .HasDatabaseName("IX_Movies_Slug_NonNull");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("API.Features.Pages.Models.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("components");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("LinkTarget")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("link_target");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("meta_description");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("OriginalPageId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_page_id");

                    b.Property<string>("PublishedById")
                        .HasColumnType("text")
                        .HasColumnName("published_by_id");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_on");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("seo_title");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("LinkTarget")
                        .IsUnique()
                        .HasDatabaseName("IX_Pages_LinkTarget_NonDeleted");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PublishedById");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Pages_Slug_NonDeleted");

                    b.HasIndex("Status");

                    b.HasIndex("OriginalPageId", "IsPublished")
                        .IsUnique()
                        .HasDatabaseName("IX_Pages_OriginalPageId_IsPublished_Unique");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("API.Features.People.Models.MovieCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Character")
                        .HasColumnType("text")
                        .HasColumnName("character");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CreditId")
                        .HasColumnType("text")
                        .HasColumnName("credit_id");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditId")
                        .IsUnique()
                        .HasDatabaseName("IX_MovieCast_CreditId_NonNull");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("MovieId", "PersonId")
                        .IsUnique();

                    b.ToTable("movie_cast");
                });

            modelBuilder.Entity("API.Features.People.Models.MovieCrew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CreditId")
                        .HasColumnType("text")
                        .HasColumnName("credit_id");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Job")
                        .HasColumnType("text")
                        .HasColumnName("job");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid")
                        .HasColumnName("movie_id");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditId")
                        .IsUnique()
                        .HasDatabaseName("IX_MovieCrew_CreditId_NonNull");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("MovieId", "PersonId", "Job")
                        .IsUnique()
                        .HasDatabaseName("IX_MovieCrew_MovieId_PersonId_Job_NonNull");

                    b.ToTable("movie_crew");
                });

            modelBuilder.Entity("API.Features.People.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AlsoKnownAs")
                        .HasColumnType("text[]")
                        .HasColumnName("also_known_as");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("Deathday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deathday");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("Homepage")
                        .HasColumnType("text")
                        .HasColumnName("homepage");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KnownForDepartment")
                        .HasColumnType("text")
                        .HasColumnName("known_for_department");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("place_of_birth");

                    b.Property<decimal?>("Popularity")
                        .HasColumnType("numeric")
                        .HasColumnName("popularity");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("text")
                        .HasColumnName("profile_path");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("people");
                });

            modelBuilder.Entity("API.Features.People.Models.TvShowCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Character")
                        .HasColumnType("text")
                        .HasColumnName("character");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CreditId")
                        .HasColumnType("text")
                        .HasColumnName("credit_id");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid")
                        .HasColumnName("tv_show_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditId")
                        .IsUnique()
                        .HasDatabaseName("IX_TvShowCast_CreditId_NonNull");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("TvShowId", "PersonId")
                        .IsUnique();

                    b.ToTable("tv_show_cast");
                });

            modelBuilder.Entity("API.Features.People.Models.TvShowCrew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("CreditId")
                        .HasColumnType("text")
                        .HasColumnName("credit_id");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Job")
                        .HasColumnType("text")
                        .HasColumnName("job");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("person_id");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid")
                        .HasColumnName("tv_show_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreditId")
                        .IsUnique()
                        .HasDatabaseName("IX_TvShowCrew_CreditId_NonNull");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PersonId");

                    b.HasIndex("TvShowId", "PersonId", "Job")
                        .IsUnique()
                        .HasDatabaseName("IX_TvShowCrew_TvShowId_PersonId_Job_NonNull");

                    b.ToTable("tv_show_crew");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("air_date");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Crew")
                        .HasColumnType("text")
                        .HasColumnName("crew");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("episode_number");

                    b.Property<string>("GuestStars")
                        .HasColumnType("text")
                        .HasColumnName("guest_stars");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Overview")
                        .HasColumnType("text")
                        .HasColumnName("overview");

                    b.Property<string>("ProductionCode")
                        .HasColumnType("text")
                        .HasColumnName("production_code");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("season_id");

                    b.Property<string>("StillPath")
                        .HasColumnType("text")
                        .HasColumnName("still_path");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_id");

                    b.Property<decimal?>("VoteAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("vote_average");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("integer")
                        .HasColumnName("vote_count");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.HasIndex("SeasonId", "EpisodeNumber")
                        .IsUnique();

                    b.ToTable("episodes");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("air_date");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("integer")
                        .HasColumnName("episode_count");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Overview")
                        .HasColumnType("text")
                        .HasColumnName("overview");

                    b.Property<string>("PosterPath")
                        .HasColumnType("text")
                        .HasColumnName("poster_path");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("integer")
                        .HasColumnName("season_number");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer")
                        .HasColumnName("tmdb_id");

                    b.Property<Guid>("TvShowId")
                        .HasColumnType("uuid")
                        .HasColumnName("tv_show_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.HasIndex("TvShowId", "SeasonNumber")
                        .IsUnique();

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.TvShow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("text");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodeRunTime")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GenresString")
                        .HasColumnType("text");

                    b.Property<bool?>("InProduction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Networks")
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfEpisodes")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfSeasons")
                        .HasColumnType("integer");

                    b.Property<string>("OriginCountry")
                        .HasColumnType("text");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("text");

                    b.Property<string>("OriginalName")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .HasColumnType("text");

                    b.Property<decimal?>("Popularity")
                        .HasColumnType("numeric");

                    b.Property<string>("PosterPath")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TmdbId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<decimal?>("VoteAverage")
                        .HasColumnType("numeric");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Slug")
                        .HasDatabaseName("IX_TvShows_Slug_NonNull");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("API.Shared.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("API.Shared.Models.MediaGenre", b =>
                {
                    b.Property<Guid>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TvShowId")
                        .HasColumnType("uuid");

                    b.HasKey("MediaId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvShowId");

                    b.ToTable("MediaGenre");
                });

            modelBuilder.Entity("Features.Analytics.Models.PerformanceMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<double>("CumulativeLayoutShift")
                        .HasColumnType("double precision")
                        .HasColumnName("cumulative_layout_shift");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text")
                        .HasColumnName("device_type");

                    b.Property<double>("FirstContentfulPaint")
                        .HasColumnType("double precision")
                        .HasColumnName("first_contentful_paint");

                    b.Property<double>("FirstInputDelay")
                        .HasColumnType("double precision")
                        .HasColumnName("first_input_delay");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("LargestContentfulPaint")
                        .HasColumnType("double precision")
                        .HasColumnName("largest_contentful_paint");

                    b.Property<double>("LoadTime")
                        .HasColumnType("double precision")
                        .HasColumnName("load_time");

                    b.Property<string>("ModifiedById")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("NetworkInfo")
                        .HasColumnType("text")
                        .HasColumnName("network_info");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("performance_metrics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Features.Analytics.Models.AbTest", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Analytics.Models.AbTestMetric", b =>
                {
                    b.HasOne("API.Features.Analytics.Models.AbTest", "AbTest")
                        .WithMany("Metrics")
                        .HasForeignKey("AbTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AbTest");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Analytics.Models.PageView", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Collections.Models.Collection", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Features.Collections.Models.MovieCollection", b =>
                {
                    b.HasOne("API.Features.Collections.Models.Collection", "Collection")
                        .WithMany("MovieCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Movies.Models.Movie", "Movie")
                        .WithMany("MovieCollections")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("API.Features.Downloads.Models.Download", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.TvShows.Models.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Movies.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Features.TvShows.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Features.TvShows.Models.TvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Episode");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Movie");

                    b.Navigation("Season");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("API.Features.FeatureFlags.Models.FeatureFlag", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Genres.Models.Genre", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Genres.Models.MediaGenre", b =>
                {
                    b.HasOne("API.Features.Genres.Models.Genre", "Genre")
                        .WithMany("MediaGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.Movies.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.TvShows.Models.TvShow", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("API.Features.Jobs.Models.Job", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Languages.Models.Language", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Languages.Models.MediaTranslation", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Languages.Models.Language", "Language")
                        .WithMany("MediaTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Movies.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("API.Features.TvShows.Models.TvShow", "TvShow")
                        .WithMany()
                        .HasForeignKey("TvShowId");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Language");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Movie");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("API.Features.Movies.Models.Movie", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.Pages.Models.Page", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Pages.Models.Page", "OriginalPage")
                        .WithMany("DraftVersions")
                        .HasForeignKey("OriginalPageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "PublishedBy")
                        .WithMany()
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("OriginalPage");

                    b.Navigation("PublishedBy");
                });

            modelBuilder.Entity("API.Features.People.Models.MovieCast", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Movies.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.People.Models.Person", "Person")
                        .WithMany("MovieCastCredits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("API.Features.People.Models.MovieCrew", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.Movies.Models.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.People.Models.Person", "Person")
                        .WithMany("MovieCrewCredits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("API.Features.People.Models.Person", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Features.People.Models.TvShowCast", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.People.Models.Person", "Person")
                        .WithMany("TvShowCastCredits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.TvShows.Models.TvShow", "TvShow")
                        .WithMany("Cast")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Person");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("API.Features.People.Models.TvShowCrew", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.People.Models.Person", "Person")
                        .WithMany("TvShowCrewCredits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.TvShows.Models.TvShow", "TvShow")
                        .WithMany("Crew")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Person");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.Episode", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.TvShows.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.Season", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Features.TvShows.Models.TvShow", "TvShow")
                        .WithMany("Seasons")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("TvShow");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.TvShow", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("API.Shared.Models.MediaGenre", b =>
                {
                    b.HasOne("API.Features.Genres.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Features.Movies.Models.Movie", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieId");

                    b.HasOne("API.Features.TvShows.Models.TvShow", null)
                        .WithMany("Genres")
                        .HasForeignKey("TvShowId");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Features.Analytics.Models.PerformanceMetric", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Shared.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Features.Analytics.Models.AbTest", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("API.Features.Collections.Models.Collection", b =>
                {
                    b.Navigation("MovieCollections");
                });

            modelBuilder.Entity("API.Features.Genres.Models.Genre", b =>
                {
                    b.Navigation("MediaGenres");
                });

            modelBuilder.Entity("API.Features.Languages.Models.Language", b =>
                {
                    b.Navigation("MediaTranslations");
                });

            modelBuilder.Entity("API.Features.Movies.Models.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Genres");

                    b.Navigation("MovieCollections");
                });

            modelBuilder.Entity("API.Features.Pages.Models.Page", b =>
                {
                    b.Navigation("DraftVersions");
                });

            modelBuilder.Entity("API.Features.People.Models.Person", b =>
                {
                    b.Navigation("MovieCastCredits");

                    b.Navigation("MovieCrewCredits");

                    b.Navigation("TvShowCastCredits");

                    b.Navigation("TvShowCrewCredits");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("API.Features.TvShows.Models.TvShow", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Genres");

                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
